import streamlit as st
import pandas as pd
import altair as alt
import seaborn as sns
import matplotlib.pyplot as plt
import os
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from sklearn.preprocessing import LabelEncoder
from fpdf import FPDF
import requests
import json

# Remplacez 'YOUR_API_KEY' par votre cl√© API Mistral (si vous souhaitez utiliser l'IA en ligne)
MISTRAL_API_KEY = "0AHCDGLvx7MFocAFM9Pw8lMAoFhZyNvu"  # Gardez cette ligne pour une utilisation future de l'API Mistral

# Style CSS personnalis√©
custom_css = """
<style>
div.stButton > button:first-child {
    background-color: #4CAF50;
    color: white;
    border-radius: 10px;
    height: 3em;
    width: 100%;
}
h1 {
    color: #4CAF50;
    font-size: 2.5em;
}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# Barre lat√©rale
with st.sidebar:
    st.title("üîß Param√®tres")
    uploaded_file_sidebar = st.file_uploader("üìÅ T√©l√©chargez votre fichier CSV ou Excel", type=["csv", "xlsx", "xls"])
    st.markdown("### ‚öôÔ∏è Analyses Suppl√©mentaires")
    st.markdown("### üîÆ Pr√©dictions Simples")
    st.caption("Besoin d'une colonne de date et d'une autre num√©rique pour la pr√©diction.")

# Titre principal
st.title("Expert en Donn√©es : Interrogez vos Donn√©es et r√©duisez vos d√©penses !")
st.write("""
Cette plateforme t'aide √† comprendre tes donn√©es et √† r√©soudre des probl√®mes.
- **T√©l√©chargez vos donn√©es** (CSV ou Excel)
- **Visualisez et nettoyez vos donn√©es**
- **Interrogez-les avec l'IA** (locale et potentiellement en ligne)
""")

# Fichier Upload principal
uploaded_file_main = st.file_uploader("Ou t√©l√©chargez un fichier ici", type=["csv", "xlsx", "xls"])
uploaded_file = uploaded_file_sidebar if uploaded_file_sidebar else uploaded_file_main
data = None

if uploaded_file:
    try:
        ext = os.path.splitext(uploaded_file.name)[1]
        if ext in [".xlsx", ".xls"]:
            data = pd.read_excel(uploaded_file)
        else:
            data = pd.read_csv(uploaded_file, on_bad_lines='skip')
        st.toast("Fichier charg√© avec succ√®s ‚úÖ", icon="üì•")
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du fichier : {e}")
        data = None

if data is not None and not data.empty:
    st.header("üìã Aper√ßu des Donn√©es")

    def highlight_missing(val):
        return 'background-color: red' if pd.isnull(val) else ''

    st.dataframe(data.head().style.applymap(highlight_missing))

    # Nettoyage
    initial_rows = len(data)
    data = data.dropna()
    rows_dropped_na = initial_rows - len(data)
    initial_rows = len(data)
    data = data.drop_duplicates()
    rows_dropped_duplicates = initial_rows - len(data)
    data.columns = [col.replace(':', '\\:').strip() for col in data.columns]
    for col in data.columns:
        if data[col].dtype == 'object':
            data[col] = pd.to_numeric(data[col], errors='coerce')
    if "Unnamed: 0" in data.columns:
        data = data.drop(columns=["Unnamed: 0"])

    numeric_columns = data.select_dtypes(include=["number"]).columns.tolist()
    categorical_columns = data.select_dtypes(include=["object", "category"]).columns.tolist()

    # R√©sum√© IA (priorit√© √† l'option en ligne, avec fallback local)
    if st.checkbox("üß† Obtenir un r√©sum√© automatique des donn√©es"):
        if MISTRAL_API_KEY:  # V√©rifie si la cl√© API est fournie
            with st.spinner("G√©n√©ration du r√©sum√© avec Mistral AI..."):
                sample_json = data.head(10).to_json(orient='records')
                prompt = f"Voici un √©chantillon des donn√©es : {sample_json}. Fais un r√©sum√© rapide : types, tendances, anomalies."
                headers = {"Authorization": f"Bearer {MISTRAL_API_KEY}",
                           "Content-Type": "application/json"}
                payload = {
                    "model": "mistral-tiny",
                    "messages": [
                        {"role": "system",
                         "content": "Vous √™tes un analyste de donn√©es exp√©riment√©."},
                        {"role": "user", "content": prompt}
                    ],
                    "max_tokens": 300
                }
                try:
                    response = requests.post(
                        "https://api.mistral.ai/v1/chat/completions",
                        json=payload,
                        headers=headers,
                        timeout=10  # Ajoute un timeout pour √©viter les blocages
                    )
                    response.raise_for_status()  # L√®ve une exception pour les codes d'erreur HTTP
                    summary = response.json()["choices"][0]["message"]["content"]
                    st.markdown("### üìæ R√©sum√© IA (Mistral AI)")
                    st.write(summary)
                except requests.exceptions.RequestException as e:
                    st.error(
                        f"Erreur lors de l'appel √† l'API Mistral : {e}.  Utilisation du r√©sum√© local.")
                    # Fallback au r√©sum√© local
                    st.markdown("### üìæ R√©sum√© IA (Local)")
                    st.markdown("#### üî¢ Types de colonnes")
                    st.write("- Colonnes num√©riques :", numeric_columns)
                    st.write("- Colonnes cat√©gorielles :", categorical_columns)
                    st.markdown("#### üß™ Statistiques principales")
                    st.write(data.describe())
                    if data.isnull().sum().sum() > 0:
                        st.warning("Des valeurs manquantes ont √©t√© d√©tect√©es.")
                    if len(data.drop_duplicates()) < len(data):
                        st.info("Des doublons ont √©t√© supprim√©s.")
                    st.markdown("#### üí° Suggestions de base")
                    st.markdown(
                        "- V√©rifiez les colonnes ayant peu de valeurs uniques.")
                    st.markdown(
                        "- Analysez les colonnes avec de fortes corr√©lations.")
        else:
            # Si la cl√© API n'est pas fournie, utilisez le r√©sum√© local
            st.markdown("### üìæ R√©sum√© IA (Local)")
            st.markdown("#### üî¢ Types de colonnes")
            st.write("- Colonnes num√©riques :", numeric_columns)
            st.write("- Colonnes cat√©gorielles :", categorical_columns)
            st.markdown("#### üß™ Statistiques principales")
            st.write(data.describe())
            if data.isnull().sum().sum() > 0:
                st.warning("Des valeurs manquantes ont √©t√© d√©tect√©es.")
            if len(data.drop_duplicates()) < len(data):
                st.info("Des doublons ont √©t√© supprim√©s.")
            st.markdown("#### üí° Suggestions de base")
            st.markdown("- V√©rifiez les colonnes ayant peu de valeurs uniques.")
            st.markdown("- Analysez les colonnes avec de fortes corr√©lations.")

    st.subheader("üîç Types de Donn√©es")
    st.write(data.dtypes)

    st.subheader("‚ùì Valeurs Manquantes")
    st.write(data.isnull().sum())

    st.subheader("üìä Statistiques Descriptives")
    stats_description = data.describe()
    st.write(stats_description)

    st.header("üìà Visualisation des Donn√©es")

    if numeric_columns:
        selected_column = st.selectbox("üìå Colonne pour histogramme",
                                     numeric_columns)
        hist_chart = alt.Chart(data).mark_bar().encode(
            alt.X(selected_column, bin=alt.Bin(maxbins=30)),
            y='count()'
        ).interactive()
        st.altair_chart(hist_chart, use_container_width=True)

        if len(numeric_columns) >= 2:
            x_col = st.selectbox("X", numeric_columns, key="x")
            y_col = st.selectbox("Y", numeric_columns, key="y")
            scatter_chart = alt.Chart(data).mark_circle(size=60).encode(
                x=x_col, y=y_col, tooltip=[x_col, y_col]
            ).interactive()
            st.altair_chart(scatter_chart, use_container_width=True)

        st.subheader("üîó Corr√©lation entre variables")
        fig, ax = plt.subplots()
        sns.heatmap(data.corr(numeric_only=True), annot=True, cmap='coolwarm',
                    fmt='.2f', ax=ax)
        st.pyplot(fig)
    else:
        st.info("Aucune colonne num√©rique d√©tect√©e.")

    if categorical_columns:
        selected_cat = st.selectbox("Colonne cat√©gorielle", categorical_columns)
        st.bar_chart(data[selected_cat].value_counts())

    st.subheader("üíæ T√©l√©charger les Donn√©es Nettoy√©es")
    cleaning_summary = ""
    if rows_dropped_na > 0:
        cleaning_summary += (
            f"- {rows_dropped_na} lignes avec valeurs manquantes supprim√©es\n")
    if rows_dropped_duplicates > 0:
        cleaning_summary += (
            f"- {rows_dropped_duplicates} doublons supprim√©s\n")
    cleaning_summary += "- Tentative de conversion des textes en chiffres\n"
    st.info(cleaning_summary)
    st.download_button("üì• T√©l√©charger les donn√©es nettoy√©es",
                       data.to_csv(index=False), "donnees_nettoyees.csv")

    st.header("üéØ Importance des variables")
    importances = None
    if len(categorical_columns) > 0:
        target_column = st.selectbox(
            "S√©lectionnez la colonne cible (√† pr√©dire)", categorical_columns)
        if target_column:
            df_model = data.copy()
            df_model = df_model.dropna()
            label_encoders = {}
            for col in df_model.columns:
                if df_model[col].dtype == 'object' and col != target_column:
                    le = LabelEncoder()
                    df_model[col] = le.fit_transform(
                        df_model[col].astype(str))
                    label_encoders[col] = le
            y = df_model[target_column]
            X = df_model.drop(columns=[target_column])
            le_target = LabelEncoder()
            y_encoded = le_target.fit_transform(y)
            model = RandomForestClassifier()
            model.fit(X, y_encoded)
            importances = pd.Series(model.feature_importances_,
                                    index=X.columns).sort_values(
                ascending=False)
            st.bar_chart(importances)

    # Assistance IA pour poser des questions sur les donn√©es
    st.header("ü§ñ Posez une question √† l'IA sur vos donn√©es")
    user_question = st.text_input("Entrez votre question :")
    if st.button("Demander √† l'IA"):
        if user_question:
            if MISTRAL_API_KEY:
                with st.spinner("Interrogation des donn√©es avec l'IA..."):
                    data_for_ai = data.head(100).to_json(
                        orient='records')  # Send only the first 100 rows
                    prompt = f"Tu es un expert en analyse de donn√©es. R√©ponds √† la question suivante en utilisant uniquement les donn√©es fournies : {user_question}. Voici un √©chantillon des donn√©es au format JSON: {data_for_ai}.  Ne fais aucun calcul, donne la r√©ponse directement en fran√ßais.  Si la question ne peut pas √™tre r√©pondue avec les donn√©es fournies, r√©ponds 'Je ne peux pas r√©pondre √† cette question avec les donn√©es fournies.'. Si la question porte sur le pays le plus riche, tu dois faire le calcul toi m√™me √† partir des donn√©es 'pib/h/20' et 'Population_totale' "
                    headers = {"Authorization": f"Bearer {MISTRAL_API_KEY}",
                               "Content-Type": "application/json"}
                    payload = {
                        "model": "mistral-tiny",
                        "messages": [
                            {"role": "system",
                             "content": "Vous √™tes un expert en analyse de donn√©es."},
                            {"role": "user", "content": prompt}
                        ],
                        "max_tokens": 300
                    }
                    try:
                        response = requests.post(
                            "https://api.mistral.ai/v1/chat/completions",
                            json=payload,
                            headers=headers,
                            timeout=20
                        )
                        response.raise_for_status()
                        ai_answer = response.json()["choices"][0]["message"][
                            "content"]
                        st.write(f"**R√©ponse de l'IA:** {ai_answer}")
                    except requests.exceptions.RequestException as e:
                        if e.response is not None and e.response.status_code == 401:
                            st.error(
                                "Erreur : Cl√© API Mistral invalide. Veuillez v√©rifier votre cl√© API et la mettre √† jour.")
                        else:
                            st.error(
                                f"Erreur lors de l'interrogation des donn√©es avec l'IA : {e}")
            else:
                st.error(
                    "Veuillez entrer votre cl√© API Mistral pour utiliser cette fonctionnalit√©.")
        else:
            st.warning("Veuillez entrer une question.")

    # G√©n√©ration de Rapport PDF
    if st.button("üìÑ G√©n√©rer un Rapport PDF"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Rapport Synth√©tique des Donn√©es", ln=True,
                 align="C")

        pdf.set_font("Arial", size=10)
        pdf.ln(10)
        pdf.multi_cell(0, 10, "R√©sum√© du nettoyage :\n" + cleaning_summary)
        pdf.ln(5)
        pdf.multi_cell(0, 10,
                       f"Nombre de lignes : {data.shape[0]}\nNombre de colonnes : {data.shape[1]}")
        pdf.ln(5)

        pdf.cell(0, 10, txt="Colonnes num√©riques :", ln=True)
        for col in numeric_columns:
            pdf.cell(0, 10, txt=f"- {col}", ln=True)
        pdf.ln(3)

        pdf.cell(0, 10, txt="Colonnes cat√©gorielles :", ln=True)
        for col in categorical_columns:
            pdf.cell(0, 10, txt=f"- {col}", ln=True)

        if importances is not None:
            pdf.ln(5)
            pdf.cell(0, 10, txt="üìä Importance des variables (mod√®le interne) :",
                     ln=True)
            for feature, importance in importances.items():
                pdf.cell(0, 10, txt=f"{feature}: {importance:.2f}", ln=True)

        pdf.ln(5)
        # Utilisation de l'API Mistral pour le r√©sum√©, avec fallback local)
        if MISTRAL_API_KEY:
            try:
                sample_json = data.head(10).to_json(orient='records')
                prompt = "Donne un r√©sum√© concis des donn√©es, en mettant en √©vidence les principaux types de variables, les valeurs manquantes, les doublons, et les implications pour l'analyse. Sois bref, –º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤."
                headers = {"Authorization": f"Bearer {MISTRAL_API_KEY}",
                           "Content-Type": "application/json"}
                payload = {
                    "model": "mistral-tiny",
                    "messages": [
                        {"role": "system",
                         "content": "Tu es un analyste de donn√©es."},
                        {"role": "user", "content": prompt}
                    ],
                    "max_tokens": 150  # Limite la r√©ponse pour √©viter les r√©ponses trop longues
                }
                response = requests.post(
                    "https://api.mistral.ai/v1/chat/completions",
                    json=payload,
                    headers=headers,
                    timeout=10
                )
                response.raise_for_status()
                summary_text = response.json()["choices"][0]["message"][
                    "content"]
                pdf.multi_cell(0, 10,
                               "R√©sum√© IA (Mistral):\n" + summary_text)
            except requests.exceptions.RequestException as e:
                pdf.multi_cell(0, 10,
                               f"Erreur lors de la g√©n√©ration du r√©sum√© IA : {e}. Utilisation du r√©sum√© local par d√©faut.")
                pdf.multi_cell(0, 10,
                               "R√©sum√© IA (Local):\nLes donn√©es contiennent des colonnes num√©riques et cat√©gorielles. Des valeurs manquantes et des doublons ont √©t√© trait√©s. Les statistiques descriptives et les corr√©lations sont disponibles pour une analyse plus approfondie.")
        else:  # Si la cl√© n'est pas fournie
            pdf.multi_cell(0, 10,
                           "R√©sum√© IA (Local):\nLes donn√©es contiennent des colonnes num√©riques et cat√©gorielles. Des valeurs manquantes et des doublons ont √©t√© trait√©s. Les statistiques descriptives et les corr√©lations sont disponibles pour une analyse plus approfondie.")

        filename = "rapport_automatique.pdf"
        pdf.output(filename)
        with open(filename, "rb") as f:
            st.download_button("üì• T√©l√©charger le rapport PDF", f,
                               file_name=filename)
else:
    st.info("""
üéØ **Commencez votre analyse maintenant !**

T√©l√©chargez votre fichier **CSV ou Excel** pour :
- Comprendre vos donn√©es
- Identifier des leviers d‚Äô√©conomies
- Poser des questions √† l‚ÄôIA
- G√©n√©rer un rapport PDF automatique

üí° Aucune comp√©tence technique requise. Juste vos donn√©es.
""")
